// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonteCarloSimulatorAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MonteCarloSimulatorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241126015341_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.HistoricalPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("UnderlyingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnderlyingId");

                    b.ToTable("HistoricalPrices");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Instruments", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.RateCurve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RateCurves");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.RatePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<int>("RateCurveId")
                        .HasColumnType("integer");

                    b.Property<double>("Tenor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RateCurveId");

                    b.ToTable("RatePoints");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InstrumentId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.OptionEntity", b =>
                {
                    b.HasBaseType("MonteCarloSimulatorAPI.Models.Instrument");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCall")
                        .HasColumnType("boolean");

                    b.Property<int>("OptionStyle")
                        .HasColumnType("integer");

                    b.Property<double>("StrikePrice")
                        .HasColumnType("double precision");

                    b.Property<int>("UnderlyingId")
                        .HasColumnType("integer");

                    b.HasIndex("UnderlyingId");

                    b.ToTable("OptionEntities", (string)null);
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.Underlying", b =>
                {
                    b.HasBaseType("MonteCarloSimulatorAPI.Models.Instrument");

                    b.ToTable("Underlyings", (string)null);
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.BarrierOptionEntity", b =>
                {
                    b.HasBaseType("MonteCarloSimulatorAPI.Models.OptionEntity");

                    b.Property<double>("BarrierLevel")
                        .HasColumnType("double precision");

                    b.Property<int>("BarrierType")
                        .HasColumnType("integer");

                    b.ToTable("BarrierOptionEntities", (string)null);
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.DigitalOptionEntity", b =>
                {
                    b.HasBaseType("MonteCarloSimulatorAPI.Models.OptionEntity");

                    b.Property<double>("Rebate")
                        .HasColumnType("double precision");

                    b.ToTable("DigitalOptionEntities", (string)null);
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.EuropeanOptionEntity", b =>
                {
                    b.HasBaseType("MonteCarloSimulatorAPI.Models.OptionEntity");

                    b.ToTable("EuropeanOptionEntities", (string)null);
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.HistoricalPrice", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.Underlying", "Underlying")
                        .WithMany("HistoricalPrices")
                        .HasForeignKey("UnderlyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Underlying");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.RatePoint", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.RateCurve", "RateCurve")
                        .WithMany("RatePoints")
                        .HasForeignKey("RateCurveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateCurve");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.Trade", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.OptionEntity", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.Instrument", null)
                        .WithOne()
                        .HasForeignKey("MonteCarloSimulatorAPI.Models.OptionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonteCarloSimulatorAPI.Models.Underlying", "Underlying")
                        .WithMany()
                        .HasForeignKey("UnderlyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Underlying");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.Underlying", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.Instrument", null)
                        .WithOne()
                        .HasForeignKey("MonteCarloSimulatorAPI.Models.Underlying", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.BarrierOptionEntity", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.OptionEntity", null)
                        .WithOne()
                        .HasForeignKey("MonteCarloSimulatorAPI.Models.BarrierOptionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.DigitalOptionEntity", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.OptionEntity", null)
                        .WithOne()
                        .HasForeignKey("MonteCarloSimulatorAPI.Models.DigitalOptionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.EuropeanOptionEntity", b =>
                {
                    b.HasOne("MonteCarloSimulatorAPI.Models.OptionEntity", null)
                        .WithOne()
                        .HasForeignKey("MonteCarloSimulatorAPI.Models.EuropeanOptionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.RateCurve", b =>
                {
                    b.Navigation("RatePoints");
                });

            modelBuilder.Entity("MonteCarloSimulatorAPI.Models.Underlying", b =>
                {
                    b.Navigation("HistoricalPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
